const { ApolloServer, gql }                   = require('apollo-server')
const { ApolloGateway, IntrospectAndCompose } = require("@apollo/gateway")
const { RESTDataSource }                      = require('apollo-datasource-rest')
const cluster                                 = require('cluster')
const { cpus }                                = require('os')
const p                                       = require('process')

const numCPUs = {% if not limit_cores %}cpus().length{% else %}{{ limit_cores }}{% endif %}

{% if query_type == 'STITCH' %}
class SocialMediaAPI extends RESTDataSource {
  constructor() {
    super()
    this.baseURL = "http://{{ hostvars.upstream.ansible_facts.default_ipv4.address }}:{{ services.upstream.service.port }}/"
  }

  // Fetch user infomation.
  async getUser(id) {
    return await this.get(`users/${id}`)
  }

  // Fetch posts infomation.
  async getPosts(id) {
    return await this.get(`users/${id}/posts`)
  }

  // Fetch comments infomation.
  async getComments(id) {
    return await this.get(`posts/${id}/comments`)
  }
}

const typeDefs = gql`
  type Comment {
    id: ID
    postId: String
    name: String
    email: String
    body: String
  }

  type Post {
    id: ID
    userId: ID
    title: String
    body: String
    comments: [Comment]
  }

  type Query {
    user(id: ID!): User
  }

  type User {
    id: ID
    name: String
    email: String
    username: String
    posts: [Post]
  }
`

const resolvers = {
  Query: {
    user: async (parent, { id }, { dataSources }) =>
      dataSources.api.getUser(id),
  },
  User: {
    posts: async (parent, args, { dataSources }) =>
      dataSources.api.getPosts(parent.id),
  },
  Post: {
    comments: async (parent, args, { dataSources }) =>
      dataSources.api.getComments(parent.id),
  }
}

const server = new ApolloServer({
  typeDefs,
  resolvers,
  dataSources: () => ({
    api: new SocialMediaAPI(),
  }),
})
{% else %}
const gateway = new ApolloGateway({
  supergraphSdl: new IntrospectAndCompose({
    subgraphs: [
      { name: "users",    url: "http://{{ hostvars.upstream.ansible_facts.default_ipv4.address }}:{{ services.upstream.subgraphs.users.port }}/query" },
      { name: "posts",    url: "http://{{ hostvars.upstream.ansible_facts.default_ipv4.address }}:{{ services.upstream.subgraphs.posts.port }}/query" },
      { name: "comments", url: "http://{{ hostvars.upstream.ansible_facts.default_ipv4.address }}:{{ services.upstream.subgraphs.comments.port }}/query" },
    ],
  }),
})
const server = new ApolloServer({ gateway })
{% endif %}

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  server
    .listen({{ services.apollo.service.port }})
    .then(({ url }) => console.log(`Server running at ${url}`))

  console.log(`Worker ${process.pid} started`);
}
