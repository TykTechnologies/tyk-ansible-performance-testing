---
- name: Provision EC2 VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ aws_instance_type }}-vpc"
    cidr_block: "{{ aws_vpc_cidr_block }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: vpc_result

- name: Provision EC2 subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc_result.vpc.id }}"
    cidr: "{{ aws_subnet_cidr }}"
    map_public: yes
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: subnet_result

- name: Provision EC2 security group
  amazon.aws.ec2_group:
    name: "{{ aws_instance_type }}-security-group"
    vpc_id: "{{ vpc_result.vpc.id }}"
    region: "{{ aws_region }}"
    description: "Gives access to all required ports."
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Provision Upstream EC2 instance
  ec2_instance:
    name: "{{ aws_instance_type }}-upstream"
    instance_type: "{{ aws_instance_type }}"
    region: "{{ aws_region }}"
    image_id: "{{ aws_image }}"
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    security_group: "{{ aws_instance_type }}-security-group"
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: upstream

- name: Provision Load Generator EC2 instance
  ec2_instance:
    name: "{{ aws_instance_type }}-load"
    instance_type: "{{ aws_instance_type }}"
    region: "{{ aws_region }}"
    image_id: "{{ aws_image }}"
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    security_group: "{{ aws_instance_type }}-security-group"
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: load

- name: Provision Tyk EC2 instance
  ec2_instance:
    name: "{{ aws_instance_type }}-tyk"
    instance_type: "{{ aws_instance_type }}"
    region: "{{ aws_region }}"
    image_id: "{{ aws_image }}"
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    security_group: "{{ aws_instance_type }}-security-group"
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: tyk

- name: Provision Kong EC2 instance
  ec2_instance:
    name: "{{ aws_instance_type }}-kong"
    instance_type: "{{ aws_instance_type }}"
    region: "{{ aws_region }}"
    image_id: "{{ aws_image }}"
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    security_group: "{{ aws_instance_type }}-security-group"
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: kong
  when: ('kong' in test_services)

- name: Provision Apollo EC2 instance
  ec2_instance:
    name: "{{ aws_instance_type }}-apollo"
    instance_type: "{{ aws_instance_type }}"
    region: "{{ aws_region }}"
    image_id: "{{ aws_image }}"
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    security_group: "{{ aws_instance_type }}-security-group"
    key_name: "{{ aws_key_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: apollo
  when: ('apollo' in test_services)

- name: Create {{ aws_instance_type }}-aws-hosts.yml
  vars:
    hosts:
      upstream: "{{ upstream.instances[0].public_dns_name }}"
      load: "{{ load.instances[0].public_dns_name }}"
      tyk: "{{ tyk.instances[0].public_dns_name }}"
      kong: "{% if 'kong' in test_services %}{{ kong.instances[0].public_dns_name }}{% endif %}"
      apollo: "{% if 'apollo' in test_services %}{{ apollo.instances[0].public_dns_name }}{% endif %}"
  template:
    src: hosts.j2
    dest: ./hosts/{{ aws_instance_type }}-aws-hosts.yml
